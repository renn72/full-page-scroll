{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useScrollListener","element","handleScroll","eventType","throttle","useState","isScrolling","setIsScrolling","listenToScroll","useCallback","e","setTimeout","useEffect","current","window","addEventListener","removeEventListener","App","currentSlide","setCurrentSlide","containerRef","useRef","console","log","swipeHandler","useSwipeable","onSwiped","dir","totalSlideNumber","c","preventDefaultTouchmoveEvent","trackTouch","trackMouse","wheelDelta","key","ref","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAIMA,EAAoB,SACxBC,EACAC,GAGI,IAFJC,EAEG,uDAFS,QACZC,EACG,uDADQ,IAGX,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAiBC,uBACrB,SAACC,GACMJ,IACHJ,EAAaQ,GACbH,GAAe,GACfI,YAAW,kBAAMJ,GAAe,KAAQH,MAG5C,CAACA,EAAUF,EAAcI,IAG3BM,qBAAU,WAKR,OAJuBX,EAAQY,SAE7BC,OAAOC,iBAAiBZ,EAAWK,GAAgB,GAE9C,WAAO,IAAD,EACL,QAAN,EAAAM,cAAA,SAAQE,oBAAoBb,EAAWK,MAExC,CAACA,EAAgBP,EAASE,KAqHhBc,MAlHf,WAIE,MAAwCZ,mBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KACMC,EAAeC,iBAAO,MAI5BC,QAAQC,IAAI,aAAeL,GAE3B,IA+CMM,EAAeC,uBAAa,CAChCC,SAjBkB,SAAChB,GACnB,IAAQiB,EAAQjB,EAARiB,IAEI,OAARA,EACET,EAAeU,IACjBN,QAAQC,IAAI,QACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,MAEZ,SAARF,GACLT,EAAe,IACjBI,QAAQC,IAAI,MACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,OAO/BC,8BAA8B,EAC9BC,YAAY,EACZC,YAAY,IAMd,OAHAhC,EAAkBoB,GAtDG,SAACV,GACpBY,QAAQC,IAAI,UACZD,QAAQC,IAAIb,GACRA,EAAEuB,WAAa,EACbf,EAAeU,IACjBN,QAAQC,IAAI,QACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,MAGzBX,EAAe,IACjBI,QAAQC,IAAI,MACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,QA2Ca,SAC9C7B,EAAkBoB,GAvCK,SAACV,GACtB,IAAQwB,EAAQxB,EAARwB,IACI,cAARA,GAA+B,aAARA,EACrBhB,EAAeU,IACjBN,QAAQC,IAAI,QACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,MAEZ,YAARK,GAA6B,WAARA,GAC1BhB,EAAe,IACjBI,QAAQC,IAAI,MACZJ,GAAgB,SAACU,GAAD,OAAOA,EAAI,QA6Be,WAG9C,+CAASL,GAAT,aACE,sBAAKW,IAAKf,EAAcgB,UAAU,YAAlC,UACE,yBACEA,UACmB,IAAjBlB,EACI,uBACA,yBAJR,SAOE,sBAAKkB,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,gCACA,mBAAGA,UAAU,mBAAb,wDAKJ,yBACEA,UACmB,IAAjBlB,EACI,uBACA,yBAJR,SAOE,sBAAKkB,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,gCACA,mBAAGA,UAAU,mBAAb,+BAGJ,yBACEA,UACmB,IAAjBlB,EACI,uBACA,yBAJR,SAOE,sBAAKkB,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,gCACA,mBAAGA,UAAU,mBAAb,gDCjIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b30d6d8.chunk.js","sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport './App.scss'\n\nconst useScrollListener = (\n  element,\n  handleScroll,\n  eventType = 'wheel',\n  throttle = 600\n) => {\n  // const scrollingTimer = useRef()\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  const listenToScroll = useCallback(\n    (e) => {\n      if (!isScrolling) {\n        handleScroll(e) // call the handler logic (this is async and will not wait for the setTimeout to run!)\n        setIsScrolling(true)\n        setTimeout(() => setIsScrolling(false), throttle)\n      }\n    },\n    [throttle, handleScroll, isScrolling]\n  )\n\n  useEffect(() => {\n    const currentElement = element.current\n    if (currentElement) {\n      window.addEventListener(eventType, listenToScroll, false)\n    }\n    return () => {\n      window?.removeEventListener(eventType, listenToScroll)\n    }\n  }, [listenToScroll, element, eventType])\n}\n\nfunction App() {\n  // const scrollSensitivitySetting = 30\n  // const slideDurationSetting = 600\n\n  const [currentSlide, setCurrentSlide] = useState(0)\n  const containerRef = useRef(null)\n\n  const totalSlideNumber = 3\n\n  console.log('main loop ' + currentSlide)\n\n  const handleScroll = (e) => {\n    console.log('scroll')\n    console.log(e)\n    if (e.wheelDelta < 0) {\n      if (currentSlide < totalSlideNumber - 1) {\n        console.log('down')\n        setCurrentSlide((c) => c + 1)\n      }\n    } else {\n      if (currentSlide > 0) {\n        console.log('up')\n        setCurrentSlide((c) => c - 1)\n      }\n    }\n  }\n\n  const handleKeyPress = (e) => {\n    const { key } = e\n    if (key === 'ArrowDown' || key === 'PageDown') {\n      if (currentSlide < totalSlideNumber - 1) {\n        console.log('down')\n        setCurrentSlide((c) => c + 1)\n      }\n    } else if (key === 'ArrowUp' || key === 'PageUp') {\n      if (currentSlide > 0) {\n        console.log('up')\n        setCurrentSlide((c) => c - 1)\n      }\n    }\n  }\n\n  const handleSwipe = (e) => {\n    const { dir } = e\n\n    if (dir === 'Up') {\n      if (currentSlide < totalSlideNumber - 1) {\n        console.log('down')\n        setCurrentSlide((c) => c + 1)\n      }\n    } else if (dir === 'Down') {\n      if (currentSlide > 0) {\n        console.log('up')\n        setCurrentSlide((c) => c - 1)\n      }\n    }\n  }\n\n  const swipeHandler = useSwipeable({\n    onSwiped: handleSwipe,\n    preventDefaultTouchmoveEvent: true,\n    trackTouch: true,\n    trackMouse: true,\n  })\n\n  useScrollListener(containerRef, handleScroll, 'wheel')\n  useScrollListener(containerRef, handleKeyPress, 'keydown')\n\n  return (\n    <div {...swipeHandler}>\n      <div ref={containerRef} className='container'>\n        <section\n          className={\n            currentSlide === 0\n              ? 'background up-scroll'\n              : 'background down-scroll'\n          }\n        >\n          <div className='content-wrapper'>\n            <p className='content-title'>I'm a hipster cafe</p>\n            <p className='content-subtitle'>\n              Scroll down and up to see the effect!\n            </p>\n          </div>\n        </section>\n        <section\n          className={\n            currentSlide === 1\n              ? 'background up-scroll'\n              : 'background down-scroll'\n          }\n        >\n          <div className='content-wrapper'>\n            <p className='content-title'>I also do catering</p>\n            <p className='content-subtitle'>yummy, yummy</p>\n          </div>\n        </section>\n        <section\n          className={\n            currentSlide === 2\n              ? 'background up-scroll'\n              : 'background down-scroll'\n          }\n        >\n          <div className='content-wrapper'>\n            <p className='content-title'>give me your money</p>\n            <p className='content-subtitle'>please, I am desperate</p>\n          </div>\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}