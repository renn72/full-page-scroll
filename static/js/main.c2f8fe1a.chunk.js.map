{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentSlide","setCurrentSlide","containerRef","useRef","console","log","element","handleScroll","eventType","throttle","isScrolling","setIsScrolling","listenToScroll","useCallback","e","setTimeout","useEffect","currentElement","current","addEventListener","removeEventListener","useScrollListener","wheelDelta","totalSlideNumber","c","ref","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA6GeA,MA1Ef,WAIE,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAeC,iBAAO,MA+B5B,OA3BAC,QAAQC,IAAI,aAAeL,GAzCH,SACxBM,EACAC,GAGI,IAFJC,EAEG,uDAFS,QACZC,EACG,uDADQ,IAGX,EAAsCV,oBAAS,GAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KAEMC,EAAiBC,uBACrB,SAACC,GACMJ,IACHH,EAAaO,GACbH,GAAe,GACfI,YAAW,kBAAMJ,GAAe,KAAQF,MAG5C,CAACA,EAAUH,EAASC,IAGtBS,qBAAU,WACR,IAAMC,EAAiBX,EAAQY,QAI/B,OAHID,GACFA,EAAeE,iBAAiBX,EAAWI,GAEtC,WACS,OAAdK,QAAc,IAAdA,KAAgBG,oBAAoBZ,EAAWI,MAGhD,CAACA,EAAgBN,EAASE,IAqC7Ba,CAAkBnB,GAfG,SAACY,GACpBV,QAAQC,IAAI,UACZD,QAAQC,IAAIS,GACRA,EAAEQ,WAAa,EACbtB,EAAeuB,IACjBnB,QAAQC,IAAI,QACZJ,GAAgB,SAACuB,GAAD,OAAOA,EAAI,MAGzBxB,EAAe,IACjBI,QAAQC,IAAI,MACZJ,GAAgB,SAACuB,GAAD,OAAOA,EAAI,SAO/B,sBAAKC,IAAKvB,EAAcwB,UAAU,YAAlC,UACE,yBACEA,UACmB,IAAjB1B,EAAqB,uBAAyB,yBAFlD,SAKE,sBAAK0B,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,gCACA,mBAAGA,UAAU,mBAAb,wDAKJ,yBACEA,UACmB,IAAjB1B,EAAqB,uBAAyB,yBAFlD,SAKE,sBAAK0B,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,gCACA,mBAAGA,UAAU,mBAAb,+BAGJ,yBACEA,UACmB,IAAjB1B,EAAqB,uBAAyB,yBAFlD,SAKE,sBAAK0B,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,yCACA,mBAAGA,UAAU,mBAAb,6CC1FKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c2f8fe1a.chunk.js","sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react'\nimport './App.scss'\n\nconst useScrollListener = (\n  element,\n  handleScroll,\n  eventType = 'wheel',\n  throttle = 600\n) => {\n  // const scrollingTimer = useRef()\n  const [isScrolling, setIsScrolling] = useState(false)\n\n  const listenToScroll = useCallback(\n    (e) => {\n      if (!isScrolling) {\n        handleScroll(e) // call the handler logic (this is async and will not wait for the setTimeout to run!)\n        setIsScrolling(true)\n        setTimeout(() => setIsScrolling(false), throttle)\n      }\n    },\n    [throttle, element, handleScroll]\n  )\n\n  useEffect(() => {\n    const currentElement = element.current\n    if (currentElement) {\n      currentElement.addEventListener(eventType, listenToScroll)\n    }\n    return () => {\n      currentElement?.removeEventListener(eventType, listenToScroll)\n      // clearTimeout(scrollingTimer.current)\n    }\n  }, [listenToScroll, element, eventType])\n}\n\nfunction App() {\n  // const scrollSensitivitySetting = 30\n  // const slideDurationSetting = 600\n\n  const [currentSlide, setCurrentSlide] = useState(0)\n  const containerRef = useRef(null)\n\n  const totalSlideNumber = 3\n\n  console.log('main loop ' + currentSlide)\n\n  // const scrollUp = () => {\n  //   if (currentSlide < totalSlideNumber) {\n  //     console.log('callback ' + currentSlide)\n  //     console.log('down')\n  //     setCurrentSlide((c) => c + 1)\n  //   }\n  // }\n\n  const handleScroll = (e) => {\n    console.log('scroll')\n    console.log(e)\n    if (e.wheelDelta < 0) {\n      if (currentSlide < totalSlideNumber - 1) {\n        console.log('down')\n        setCurrentSlide((c) => c + 1)\n      }\n    } else {\n      if (currentSlide > 0) {\n        console.log('up')\n        setCurrentSlide((c) => c - 1)\n      }\n    }\n  }\n  useScrollListener(containerRef, handleScroll)\n\n  return (\n    <div ref={containerRef} className='container'>\n      <section\n        className={\n          currentSlide === 0 ? 'background up-scroll' : 'background down-scroll'\n        }\n      >\n        <div className='content-wrapper'>\n          <p className='content-title'>I'm a hipster cafe</p>\n          <p className='content-subtitle'>\n            Scroll down and up to see the effect!\n          </p>\n        </div>\n      </section>\n      <section\n        className={\n          currentSlide === 1 ? 'background up-scroll' : 'background down-scroll'\n        }\n      >\n        <div className='content-wrapper'>\n          <p className='content-title'>I also do catering</p>\n          <p className='content-subtitle'>yummy, yummy</p>\n        </div>\n      </section>\n      <section\n        className={\n          currentSlide === 2 ? 'background up-scroll' : 'background down-scroll'\n        }\n      >\n        <div className='content-wrapper'>\n          <p className='content-title'>come and give me your money</p>\n          <p className='content-subtitle'>please, I am desperate</p>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}